// <auto-generated />
using System;
using JobPortalApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPortalApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251023222634_AddCompanyAndLocationToJob")]
    partial class AddCompanyAndLocationToJob
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobPortalApi.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("JobId", "UserId")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("JobPortalApi.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalaryMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalaryMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "",
                            Company = "TechVerse",
                            Description = "Build REST APIs with ASP.NET Core, EF Core, SQL Server.",
                            Location = "Karachi, PK",
                            PostedAt = new DateTime(2025, 10, 23, 22, 26, 33, 740, DateTimeKind.Utc).AddTicks(4255),
                            RecruiterId = 1,
                            SalaryMax = 120000m,
                            SalaryMin = 60000m,
                            Title = "Junior .NET Developer"
                        },
                        new
                        {
                            Id = 2,
                            Category = "",
                            Company = "CloudEdge",
                            Description = "SPA development, API integration, unit testing.",
                            Location = "Remote",
                            PostedAt = new DateTime(2025, 10, 23, 22, 26, 33, 740, DateTimeKind.Utc).AddTicks(4259),
                            RecruiterId = 1,
                            SalaryMax = 140000m,
                            SalaryMin = 70000m,
                            Title = "Frontend Developer (React)"
                        });
                });

            modelBuilder.Entity("JobPortalApi.Models.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Recruiter");
                });

            modelBuilder.Entity("JobPortalApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "recruiter@example.com",
                            FullName = "Recruiter Admin",
                            PasswordHash = "5006bc9c4a11684307bb20e04a22625a69a47553943bef5a435c26dbbc6b5da8",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@example.com",
                            FullName = "Demo User",
                            PasswordHash = "e606e38b0d8c19b24cf0ee3808183162ea7cd63ff7912dbb22b5e803286b4446",
                            Role = 0
                        });
                });

            modelBuilder.Entity("JobPortalApi.Models.Application", b =>
                {
                    b.HasOne("JobPortalApi.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApi.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortalApi.Models.Job", b =>
                {
                    b.HasOne("JobPortalApi.Models.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApi.Models.User", null)
                        .WithMany("Jobs")
                        .HasForeignKey("UserId");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("JobPortalApi.Models.Recruiter", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobPortalApi.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
